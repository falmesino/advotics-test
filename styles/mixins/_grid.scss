/**
 * Bootstrap Grid
 * Documentation: https://getbootstrap.com/docs/4.6/layout/grid/#example-usage
 */

@use 'sass:math';
@use '../functions/divide';

@import '../variables/breakpoints';

/**
 * Grid System
 * Generate semantic grid columns with these mixins
 */

@mixin make-container(
  $gutter: $grid-gutter-width, 
  $gutter-mobile: $grid-gutter-width-mobile,
  $mobile-breakpoint: $grid-mobile-trigger
)
{
  width: 100%;
  padding-right: $gutter * .5;
  padding-left: $gutter * .5;
  margin-right: auto;
  margin-left: auto;

  @include mediaBreakpoint('down', $mobile-breakpoint)
  {
    padding-right: $gutter-mobile * .5;
    padding-left: $gutter-mobile * .5;
  }
}

@mixin makeContainer(
  $gutter: $grid-gutter-width, 
  $gutter-mobile: $grid-gutter-width-mobile,
  $mobile-breakpoint: $grid-mobile-trigger
)
{
  @include make-container($gutter, $gutter-mobile, $mobile-breakpoint);
}

@mixin make-row(
  $gutter: $grid-gutter-width, 
  $gutter-mobile: $grid-gutter-width-mobile,
  $mobile-breakpoint: $grid-mobile-trigger
)
{
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter * .5;
  margin-left: -$gutter * .5;

  @include mediaBreakpoint('down', $mobile-breakpoint)
  {
    margin-right: -$gutter-mobile * .5;
    margin-left: -$gutter-mobile * .5;
  }
}

@mixin makeRow(
  $gutter: $grid-gutter-width, 
  $gutter-mobile: $grid-gutter-width-mobile,
  $mobile-breakpoint: $grid-mobile-trigger
)
{
  @include make-row($gutter, $gutter-mobile, $mobile-breakpoint);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints)
{
  @each $breakpoint, $container-max-width in $max-widths
  {
    @include media-breakpoint-up($breakpoint, $breakpoints)
    {
      max-width: $container-max-width;
    }
  }
}

@mixin make-col-ready(
  $gutter: $grid-gutter-width, 
  $gutter-mobile: $grid-gutter-width-mobile,
  $mobile-breakpoint: $grid-mobile-trigger
)
{
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter * .5;
  padding-left: $gutter * .5;

  @include mediaBreakpoint('down', $mobile-breakpoint)
  {
    padding-right: $gutter-mobile * .5;
    padding-left: $gutter-mobile * .5;
  }
}

@mixin makeColReady(
  $gutter: $grid-gutter-width, 
  $gutter-mobile: $grid-gutter-width-mobile,
  $mobile-breakpoint: $grid-mobile-trigger
)
{
  @include make-col-ready($gutter, $gutter-mobile, $mobile-breakpoint);
}

@mixin make-col($size, $columns: $grid-columns)
{
  flex: 0 0 math.percentage(math.div($size, $columns));
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: math.percentage(math.div($size, $columns));
}

@mixin makeCol($size, $columns: $grid-columns)
{
  @include make-col($size, $columns);
}

@mixin make-col-auto()
{
  flex: 0 0 auto;
  width: auto;
  max-width: 100%; // Reset earlier grid tiers
}

@mixin makeColAuto()
{
  @include make-col-auto();
}

@mixin make-col-offset($size, $columns: $grid-columns)
{
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, math.percentage($num));
}

@mixin makeColOffset($size, $columns: $grid-columns)
{
  @include make-col-offset($size, $columns);
}

/**
 * Row columns
 * Specify on a parent element(e.g., .row) to force immediate children into NN
 * numberof columns. Supports wrapping to new lines, but does not do a Masonry
 * style grid.
 */

@mixin row-cols($count)
{
  > * 
  {
    flex: 0 0 math.div(100%, $count);
    max-width: math.div(100%, $count);
  }
}

/**
 * Framework grid generation
 * Used only by Bootstrap to generate the correct number of grid classes given
 * any value of `$grid-columns`.
 */

@mixin make-grid-columns(
  $columns: $grid-columns, 
  $gutter: $grid-gutter-width, 
  $breakpoints: $grid-breakpoints
)
{
  // Common properties for all breakpoints
  %grid-column
  {
    position: relative;
    width: 100%;
    padding-right: $gutter * .5;
    padding-left: $gutter * .5;
  }

  @each $breakpoint in map-keys($breakpoints)
  {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0
    {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns
      {
        .col#{$infix}_#{$i}
        {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}_auto
    {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints)
    {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix}
      {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if $grid-row-columns > 0
      {
        @for $i from 1 through $grid-row-columns
        {
          .row_cols#{$infix}-#{$i}
          {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}_auto
      {
        @include make-col-auto();
      }

      @if $columns > 0
      {
        @for $i from 1 through $columns
        {
          .col#{$infix}_#{$i}
          {
            @include make-col($i, $columns);
          }
        }
      }

      .order#{$infix}_first
      { 
        order: -1;
      }

      .order#{$infix}_last
      {
        order: $columns + 1;
      }

      @for $i from 0 through $columns
      {
        .order#{$infix}_#{$i}
        {
          order: $i;
        }
      }

      @if $columns > 0
      {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1)
        {
          // Avoid emitting useless .offset-0
          @if not ($infix == "" and $i == 0)
          { 
            .offset#{$infix}_#{$i}
            {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}

/**
 * Container widths
 * Set the container width, and override it for fixed navbars in media queries.
 */

.container,
.containerFluid
{
  @include makeContainer();
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths
{
  .container_#{$breakpoint}
  {
    @extend .containerFluid;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints)
  {
    %responsive-container-#{$breakpoint}
    {
      max-width: $container-max-width;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints
    {
      @if ($extend-breakpoint)
      {
        .container#{breakpoint-infix($name, $grid-breakpoints)}
        {
          @extend %responsive-container-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint == $name)
        {
          $extend-breakpoint: false;
        }
      }
    }
  }
}

/**
 * Row
 * Rows contain your columns
 */

.row
{
  @include makeRow();

  &.noGutters
  {
    margin-left: 0;
    margin-right: 0;

    & > .col,
    & > [class*="col_"]
    {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

/**
 * Columns
 * Common styles for small and large grid columns
 */

@include make-grid-columns();